// #  [PROBLEM ID12](https://projecteuler.net/problem=12)
//
// The sequence of triangle numbers is generated by adding the natural numbers.
// So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
// The first ten terms would be:
//
// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//
// Let us list the factors of the first seven triangle numbers:
//
//      1: 1
//      3: 1,3
//      6: 1,2,3,6
//     10: 1,2,5,10
//     15: 1,3,5,15
//     21: 1,3,7,21
//     28: 1,2,4,7,14,28
//
// We can see that 28 is the first triangle number to have over five divisors.
//
// What is the value of the first triangle number to have over five hundred
// divisors?
package id12

import (
	"fmt"
	"github.com/Daniel-M/ProjectEuler_Solutions/utilities/exactlyDivisible"
	"github.com/Daniel-M/ProjectEuler_Solutions/utilities/triangularNumbers"
	//	"github.com/Daniel-M/ProjectEuler_Solutions/utilities/sliceUtilities"
)

//func main(){
func Solution() {
	fmt.Println("Solution to the problem id12")
	/*
		var factores []int

		for i:=2; i < 50; i++{

			factores = exactlyDivisible.ListOfFactors(i)

			fmt.Println("List of factors of",i,factores)

			factores = make([]int,0)
		}
	*/
	number_of_factors := 1
	counter := 0

	number := 0

	const limit = 20000000

	for i := 7; number_of_factors < 500 && counter < limit; i++ {
		number = triangularNumbers.TriangularN(i)
		number_of_factors = len(exactlyDivisible.ListOfFactors(number))
		//		fmt.Println(i,number,number_of_factors)
		counter++
	}

	if counter >= limit {
		fmt.Println("I haven't found shit")
	} else {
		fmt.Println("I have found", number, "with", number_of_factors)
	}
}
